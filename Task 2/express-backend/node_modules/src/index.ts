import express, { Request, Response } from 'express';
import bodyParser from 'body-parser';
import fs from 'fs';
import path from 'path';

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

const dbPath = path.resolve(__dirname, 'db.json');

interface Submission {
  name: string;
  email: string;
  phone: string;
  github_link: string;
  stopwatch_time: number;
}

interface Database {
  submissions: Submission[];
}

// Ensure db.json exists
if (!fs.existsSync(dbPath)) {
  fs.writeFileSync(dbPath, JSON.stringify({ submissions: [] }, null, 2));
}

// Read database
const readDatabase = (): Database => {
  const data = fs.readFileSync(dbPath, 'utf-8');
  return JSON.parse(data);
};

// Write database
const writeDatabase = (data: Database) => {
  fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));
};

// /ping endpoint
app.get('/ping', (req: Request, res: Response) => {
  res.json({ success: true });
});

// /submit endpoint
app.post('/submit', (req: Request, res: Response) => {
  const { name, email, phone, github_link, stopwatch_time } = req.body;

  if (!name || !email || !phone || !github_link || stopwatch_time === undefined) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  const newSubmission: Submission = { name, email, phone, github_link, stopwatch_time };
  const db = readDatabase();
  db.submissions.push(newSubmission);
  writeDatabase(db);

  res.json({ success: true });
});

// /read endpoint
app.get('/read', (req: Request, res: Response) => {
  const { index } = req.query;

  if (index === undefined || isNaN(Number(index))) {
    return res.status(400).json({ error: 'Index is required and should be a number' });
  }

  const db = readDatabase();
  const submissionIndex = Number(index);

  if (submissionIndex < 0 || submissionIndex >= db.submissions.length) {
    return res.status(404).json({ error: 'Submission not found' });
  }

  const submission = db.submissions[submissionIndex];
  res.json(submission);
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
